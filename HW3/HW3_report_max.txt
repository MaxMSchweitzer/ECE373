=============================================================
Max Schweitzer
ECE 373 - HW3 - PCI LED driver
PJ
4/30/2018
=============================================================

=============================================================
What to turn in: 1. Answers to the questions in Part 1
=============================================================

1. Atomic
    a. Realtek ALC888
    b. Super IO Winbond W83627DHG
    c. 2
        i. GbE LAN1: Intel 82567V
       ii. GbE LAN2: Intel 82583V
    d. 6
2. Network Noodling
    a. Leads 31, 30, 33
    b. 0x00000 / 0x00004
    c. Bit 26
3. Winken, Blinken, and Nod
    a. LEDCTRL 0x00E00
    b. To bits 11:8 write b'1111
    c. To bit 23 write b'1
4.  EIEIO
    a. Winbond Electronics Corporation
    b. Yep
    c. Contact the company directly

=============================================================
What to turn in: 2. Kernel source and Makefile
=============================================================

/* Max Schweitzer
   ECE 373
   Homework 3 - PCI LED Driver
   This code implements a basic pci driver,
   with open, close, read, and write functions,
   and the ability to blink an LED for the
   Intel 82540EM Gigabit Ethernet Controller.
   PCI functions implemented are probe and 
   remove.
   4/30/18
*/   

#include <linux/module.h>
#include <linux/types.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/usb.h>
#include <linux/slab.h>
#include <linux/uaccess.h>
#include <linux/pci.h>

#define DEV_COUNT 2
#define DEV_NAME "HW3-Max"

#define PE_REG_LEDS 0x0E00

static struct dev_info
{
  struct cdev cdev;

  // User defineable and interactable variable.
  int syscall_val;
} dev;

static dev_t dev_node;

// Starting value for syscall_val, gets applied during init.
static int test = 25;

module_param(test, int, S_IRUSR | S_IWUSR);

static const struct pci_device_id pe_pci_tbl[] = {
  { PCI_DEVICE(0x8086, 0x100e), 0, 0, 0 },

  {0, }
};

static char *pe_driver_name = "test_pci_driver";

struct pes {
  struct pci_dev *pdev;
  void *hw_addr;
} *pe;

static int open(struct inode *inode, struct file *file)
{ 
  printk(KERN_INFO "Opened instance.\n");

  return 0;
}

static int release(struct inode *inode, struct file *file)
{
  printk(KERN_INFO "Closed instance.\n");
  return 0;
}

// Simple read function, allowing the current value of LEDCTL register to be passed to user.
static ssize_t kern_read(struct file *file, char __user *buf, size_t len, loff_t *offset)
{
  ssize_t result;
  uint32_t led_reg;
 
  // Make sure we stay within our bounds and don't go into an infinite loop.
  if (*offset >= sizeof(uint32_t))
  {
    *offset = 0;
    return 0;
  }

  // Make sure the user actually gave us something valid to play with.
  if (!buf)
  {
    printk(KERN_ERR "!buf\n");
    result = -EINVAL;
    goto out;
  }

  led_reg = readl(pe->hw_addr + PE_REG_LEDS);

  // Send it to the user.
  if (copy_to_user(buf, &led_reg, sizeof(uint32_t)))
  {
    printk(KERN_ERR "!buf\n");
    result = -EFAULT;
    goto out;
  }

  result = sizeof(uint32_t);
  *offset += len;

  // If we made it here, we passed it back okay. Probably.
  printk(KERN_INFO "Passed user led_reg = 0x%08x\n", led_reg);

out:
  return result;
}


// Simple write function, allowing user space to modify LEDCTL value.
static ssize_t kern_write(struct file *file, const char __user *buf, size_t len, loff_t * offset)
{
  ssize_t result;
  long *ptr_result;
  long store_val;
  uint32_t to_write = 0;
  ptr_result = &store_val;

  // Did the user give us something okay?
  if (!buf)
  {
    result = -EINVAL;
    goto out;
  }

  // Make sure it's only 32 bits.
  if (len > sizeof(uint32_t))
  {
    result = -EFAULT;
    goto out;
  }

  // Take in the user value.
  if (copy_from_user(&to_write, buf, len))
  {
    result = -EFAULT;
    goto out;
  }

  result = len;

  writel(to_write, pe->hw_addr + PE_REG_LEDS);
  
  *offset = 0;

  // We should be good then.
  printk(KERN_INFO "User wrote 0x%08x to 0x%08x\n", to_write, pe->hw_addr + PE_REG_LEDS);

out:
  return result;
}

static struct file_operations dev_fops = {
  .owner = THIS_MODULE,
  .open = open,
  .read = kern_read,
  .write = kern_write,
  .release = release
};

// Probe function, mostly taken from pci_example.c and pci_realtek.c
// provided on D2L
static int pe_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
{
  uint32_t ioremap_len;
  int bars, err;

  err = pci_enable_device_mem(pdev);
  if (err)
    return err;

  // Don't really need this, but it doesn't hurt anything
  // so I didn't bother removing it.
  err = dma_set_mask(&pdev->dev, DMA_BIT_MASK(64));
  if (err) 
  {
    dev_err(&pdev->dev, "DMA configuration failed: 0x%x\n", err);
    goto err_dma;
  }

  bars = pci_select_bars(pdev, IORESOURCE_MEM);

  // Set up PCI connections
  err = pci_request_selected_regions(pdev, bars, pe_driver_name);
  if (err) {
    dev_info(&pdev->dev, "pci_request_selected_regions failed %d\n", err);
    goto err_pci_reg;
  }

  pci_set_master(pdev);
 
  pe = kzalloc(sizeof(*pe), GFP_KERNEL);
  if (!pe) {
    err = -ENOMEM;
    goto err_pe_alloc;
  }
  pe->pdev = pdev;
  pci_set_drvdata(pdev, pe);

  // Map our devices memory
  ioremap_len = min_t(int, pci_resource_len(pdev, 0), 1024);
  pe->hw_addr = ioremap(pci_resource_start(pdev, 0), ioremap_len);
  if (!pe->hw_addr) {
    err = -EIO;
    dev_info(&pdev->dev, "ioremap(0x%04x, 0x%04x) failed: 0x%x\n",
			 (unsigned int)pci_resource_start(pdev, 0),
			 (unsigned int)pci_resource_len(pdev, 0), err);
    goto err_ioremap;
  }
  
  return 0;

err_ioremap:
  kfree(pe);
err_pe_alloc:
  pci_release_selected_regions(pdev, pci_select_bars(pdev, IORESOURCE_MEM));
err_pci_reg:
err_dma:
  pci_disable_device(pdev);
  return err;
}

// Also pretty much taken from pci_example.c and pci_realtek.c
static void pe_remove(struct pci_dev *pdev)
{
  struct pes *pe = pci_get_drvdata(pdev);

  // Unmap our device from memory
  iounmap(pe->hw_addr);

  // Free allocated memory
  kfree(pe);

  pci_release_selected_regions(pdev, pci_select_bars(pdev, IORESOURCE_MEM));
  pci_disable_device(pdev);
}

static struct pci_driver pe_driver = {
  .name = "pci_example",
  .id_table = pe_pci_tbl,
  .probe = pe_probe,
  .remove = pe_remove
};

static int __init kern_init(void)
{
  int result = 0;

  // Dynamically allocate the device.
  result = alloc_chrdev_region(&dev_node, 0, DEV_COUNT, DEV_NAME);

  if (result)
  {
    printk(KERN_ERR "Allocation failed!");
    return result;
  }

  printk(KERN_INFO "Allocated device successfuly at major: %d\n", MAJOR(dev_node));
  
  // Do our other initialization procedures, make sure they work out.
  cdev_init(&dev.cdev, &dev_fops);
  dev.cdev.owner = THIS_MODULE;

  if (cdev_add(&dev.cdev, dev_node, DEV_COUNT))
  {
    printk(KERN_ERR "Failed to add!\n");
    unregister_chrdev_region(dev_node, DEV_COUNT);
  }
  else
  {
    // Add worked, so let's initialize the value.
    dev.syscall_val = test;
  }

  result = pci_register_driver(&pe_driver); 
  if (result)
  {
    printk(KERN_INFO "Bad?\n");
  }

  return result;
}


static void __exit kern_exit(void)
{
  // Clean up what we used, be a good module.
  cdev_del(&dev.cdev);
  unregister_chrdev_region(dev_node, DEV_COUNT);
  pci_unregister_driver(&pe_driver);
  printk(KERN_INFO "Unloaded.");
}

MODULE_AUTHOR("Max Schweitzer");
MODULE_LICENSE("GPL");
MODULE_VERSION("0.1");
module_init(kern_init);
module_exit(kern_exit);

=============================================================
Makefile
=============================================================

KERNEL_DIR = /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)

obj-m += hw3_pci.o

default:
	$(MAKE) -C $(KERNEL_DIR) SUBDIRS=$(PWD) modules

clean:
	$(MAKE) -C $(KERNEL_DIR) SUBDIRS=$(PWD) clean


=============================================================
What to turn in: 3. User space source
=============================================================

/* Max Schweitzer
   ECE 373
   Homework 3 - PCI LED Driver
   This code implements a user space program to
   test a basic PCI driver that can blink an LED.
   4/30/18
*/

#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>

#define LENGTH 256
#define LED0_MASK 0x0000000F

int main()
{
  int fd;
  uint32_t toSend = 0;
  uint32_t toRead = 0;

  fd = open("/dev/hw3_pci", O_RDWR);
  if (fd < 0)
  {
    printf("Open error: %d\n", fd);
    return 1;
  }

  int ret;

  // First, lets read the current value.
  ret = read(fd, &toRead, sizeof(uint32_t));
  if (ret < 0)
  {
    printf("Error reading");
    return 1;
  }

  printf("Was read:             0x%08x\n", toRead);

  // Turn on LED0
  toSend = 0;
 
  // Read, modify, write so we don't clobber reserved bits.
  toRead = toRead & (~LED0_MASK);
  toSend = toRead | 0x0000000e;

  printf("Will write:           0x%08x\n", toSend);

  ret = write(fd, &toSend, sizeof(uint32_t));
  if (ret < 0)
  {
    printf("Error writing!");
    return 1;
  }

  // Overwrite before we read again.
  toRead = 0;

  ret = read(fd, &toRead, sizeof(uint32_t));
  if (ret < 0)
  {
    printf("Error reading");
    return 1;
  }

  printf("Was read after write: 0x%08x\n", toRead);

  sleep(2); 

  // Turn off LED0
  toSend = 0;

  // Read modify write
  toRead = toRead & (~LED0_MASK);
  toSend = toRead | 0x0000000f;

  printf("Will write:           0x%08x\n", toSend);
  
  ret = write(fd, &toSend, sizeof(uint32_t));
  if (ret < 0)
  {
    printf("Error writing!");
    return 1;
  }
  
  ret = close(fd);

  return ret;
}

=============================================================
What to turn in: 4. Typescript unbind, bind, and userspace
                    being run. 
=============================================================

Script started on Mon 30 Apr 2018 02:10:05 PM PDT
.kot@MaxVirt:/home/max/ECE373-A2/HW3# insmod hw3_pci.
_pci@ca243r0:/home/max/ECE373-A2/HW3# mknod /dev/hw3
.0ot@MaxVirt:/home/max/ECE373-A2/HW3# lspci -s 00:03
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)
.0o-vMaxVirt:/home/max/ECE373-A2/HW3# lspci -s 00:03.
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)
	Subsystem: Red Hat, Inc QEMU Virtual Machine
	Physical Slot: 3
	Flags: bus master, fast devsel, latency 0, IRQ 11
	Memory at fc040000 (32-bit, non-prefetchable) [size=128K]
	I/O ports at c000 [size=64]
	Expansion ROM at fc000000 [disabled] [size=256K]
	Kernel driver in use: e1000
	Kernel modules: e1000

root@MaxVirt:/home/max/ECE373-A2/HW3# lspci -s 00:03.
3.0o>0/sys/module/e1000/drivers/pci\:e1000/unbind
indt>M/sys/module/hw3_pci/drivers/pci\:pci_example/b
inde1000/drivers/pci\:e1000/unbindpci\:pci_example/bi
lspci -s 00:03.0 -v
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)
	Subsystem: Red Hat, Inc QEMU Virtual Machine
	Physical Slot: 3
	Flags: bus master, fast devsel, latency 0, IRQ 11
	Memory at fc040000 (32-bit, non-prefetchable) [size=128K]
	I/O ports at c000 [size=64]
	Expansion ROM at fc000000 [disabled] [size=256K]
	Kernel driver in use: pci_example
	Kernel modules: e1000

root@MaxVirt:/home/max/ECE373-A2/HW3# cd User/
root@MaxVirt:/home/max/ECE373-A2/HW3/User# lspci0-s00:03.00-v /sys/module/hw3_pci/drivers/pci\:pci_examp
root@MaxVirt:/home/max/ECE373-A2/HW3/User# cd User/
./user
Was read:	      0x00000602
Will write:	      0x0000060e
Was read after write: 0x0000060e
Will write:	      0x0000000f
root@MaxVirt:/home/max/ECE373-A2/HW3/User# ./user
Was read:	      0x0000000f
Will write:	      0x0000000e
Was read after write: 0x0000000e
Will write:	      0x0000000f
root@MaxVirt:/home/max/ECE373-A2/HW3/User# exit
exit

Script done on Mon 30 Apr 2018 02:19:49 PM PDT

