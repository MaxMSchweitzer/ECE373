=============================================================
Max Schweitzer
ECE 373 - HW2 - Char driver
PJ
4/23/2018
=============================================================

=============================================================
What to turn in: 1. Kernel module source and Makefile
=============================================================

/* Max Schweitzer
   ECE 373
   Homework 2 - Char Driver
   This code implements a basic character driver,
   with open, close, read, and write functions,
   and the ability to set a module parameter (syscall_val)
   on the command line when using insmod.
   4/22/18
*/   

#include <linux/module.h>
#include <linux/types.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/usb.h>
#include <linux/slab.h>
#include <linux/uaccess.h>

#define DEV_COUNT 2
#define DEV_NAME "HW2-Max"

static struct dev_info
{
  struct cdev cdev;

  // User defineable and interactable variable.
  int syscall_val;
} dev;

static dev_t dev_node;

// Starting value for syscall_val, gets applied during init.
static int test = 25;

module_param(test, int, S_IRUSR | S_IWUSR);

static int open(struct inode *inode, struct file *file)
{ 
  printk(KERN_INFO "Opened instance.\n");

  return 0;
}

static int release(struct inode *inode, struct file *file)
{
  printk(KERN_INFO "Closed instance.\n");
  return 0;
}

// Simple read function, allowing the current value of syscall_val to be passed to a user.
static ssize_t kern_read(struct file *file, char __user *buf, size_t len, loff_t *offset)
{
  ssize_t result;
  char temp[20];
 
  // Make sure we stay within our bounds and don't go into an infinite loop.
  if (*offset >= sizeof(int))
  {
    *offset = 0;
    return 0;
  }
 

  // Make sure the user actually gave us something valid to play with.
  if (!buf)
  {
    printk(KERN_ERR "!buf\n");
    result = -EINVAL;
    goto out;
  }

  

  // Convert from int to char, so that it plays nicely with user space
  // assuming it's a char array.
  snprintf(temp, sizeof(int),"%d", dev.syscall_val);

  // Send it to the user.
  if (copy_to_user(buf, temp, strlen(temp)))
  {
    printk(KERN_ERR "!buf\n");
    result = -EFAULT;
    goto out;
  }

  result = sizeof(int);
  *offset += len;

  // If we made it here, we passed it back okay. Probably.
  printk(KERN_INFO "User was passed %d\n", dev.syscall_val);

out:
  return result;
}


// Simple write function, allowing user space to modify syscall_val.
static ssize_t kern_write(struct file *file, const char __user *buf, size_t len, loff_t * offset)
{
  char *kern_buf;
  ssize_t result;
  int val;
  long *ptr_result;
  long store_val;
  ptr_result = &store_val;

  // Did the user give us something okay?
  if (!buf)
  {
    result = -EINVAL;
    goto out;
  }

  // Get a chunk of memory.
  kern_buf = kmalloc(len, GFP_KERNEL);

  if (!kern_buf)
  {
    result = -ENOMEM;
    goto mem_out;
  }

  // Take in the user value.
  if (copy_from_user(kern_buf, buf, len))
  {
    result = -EFAULT;
    goto mem_out;
  }

  result = len;

  // Convert from char into int and assign it to our value internally.
  val = kstrtol(kern_buf, 10, ptr_result);
  dev.syscall_val = *ptr_result;
  // Since the test variable is our easy way to interface a parameter with syscall_val,
  // make sure that stays current.
  test = *ptr_result;

  *offset = 0;

  // We should be good then.
  printk(KERN_INFO "User wrote %d\n", dev.syscall_val);

mem_out:
  kfree(kern_buf);
out:
  return result;
}

static struct file_operations dev_fops = {
  .owner = THIS_MODULE,
  .open = open,
  .read = kern_read,
  .write = kern_write,
  .release = release
};

static int __init kern_init(void)
{
  int result = 0;

  // Dynamically allocate the device.
  result = alloc_chrdev_region(&dev_node, 0, DEV_COUNT, DEV_NAME);

  if (result)
  {
    printk(KERN_ERR "Allocation failed!");
    return result;
  }

  printk(KERN_INFO "Allocated device successfuly at major: %d\n", MAJOR(dev_node));
  
  // Do our other initialization procedures, make sure they work out.
  cdev_init(&dev.cdev, &dev_fops);
  dev.cdev.owner = THIS_MODULE;

  if (cdev_add(&dev.cdev, dev_node, DEV_COUNT))
  {
    printk(KERN_ERR "Failed to add!\n");
    unregister_chrdev_region(dev_node, DEV_COUNT);
  }
  else
  {
    // Add worked, so let's initialize the value.
    dev.syscall_val = test;
  }

  return result;
}


static void __exit kern_exit(void)
{
  // Clean up what we used, be a good module.
  cdev_del(&dev.cdev);
  unregister_chrdev_region(dev_node, DEV_COUNT);
  printk(KERN_INFO "Unloaded.");
}

MODULE_AUTHOR("Max Schweitzer");
MODULE_LICENSE("GPL");
MODULE_VERSION("0.1");
module_init(kern_init);
module_exit(kern_exit);



==============================
Makefile
==============================

KERNEL_DIR = /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)

obj-m += hw2_kernel.o

default:
	$(MAKE) -C $(KERNEL_DIR) SUBDIRS=$(PWD) modules

clean:
	$(MAKE) -C $(KERNEL_DIR) SUBDIRS=$(PWD) clean

=============================================================
What to turn in: 2. Userspace program source
=============================================================

/* Max Schweitzer
   ECE 373
   Homework 2 - Char Driver
   This code implements a user space program to
   test a basic char driver.
   4/22/18
*/

#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#define LENGTH 256

int main()
{
  int fd;

  //char receive;
  int send = 0;

  char toSend[LENGTH] = {0};

  strcpy(toSend, "20");

  fd = open("/dev/hw2_kernel", O_RDWR);
  if (fd < 0)
  {
    printf("Open error: %d\n", fd);
    return 1;
  }

  int ret;

  // First, lets read the current value.
  ret = read(fd, toSend, sizeof(int));
  if (ret < 0)
  {
    printf("Error reading");
    return 1;
  }

  printf("Was read: %s\n", toSend);

  // Now get a value from the user and send it over.
  printf("Enter a number: ");
  scanf("%s", toSend);

  printf("Will write: %s\n", toSend);

  ret = write(fd, toSend, sizeof(int));
  if (ret < 0)
  {
    printf("Error writing!");
    return 1;
  }

  // Overwrite before we read again.
  strcpy(toSend, "0");

  ret = read(fd, toSend, sizeof(int));
  if (ret < 0)
  {
    printf("Error reading");
    return 1;
  }

  printf("Was read after write: %s\n", toSend);

  ret = close(fd);

  return ret;
}

=============================================================
Start typescript portions, What to turn in 3 and 4.
=============================================================

Script started on Mon 23 Apr 2018 12:47:07 PM PDT

=============================================================
Make being run, not too important.
=============================================================

max@MaxVirt:~/ECE373-A2/HW2$ make clean
make -C /lib/modules/4.13.0-38-generic/build SUBDIRS=/home/max/ECE373-A2/HW2 clean
make[1]: Entering directory '/usr/src/linux-headers-4.13.0-38-generic'
  CLEAN   /home/max/ECE373-A2/HW2/.tmp_versions
  CLEAN   /home/max/ECE373-A2/HW2/Module.symvers
make[1]: Leaving directory '/usr/src/linux-headers-4.13.0-38-generic'
max@MaxVirt:~/ECE373-A2/HW2$ make
make -C /lib/modules/4.13.0-38-generic/build SUBDIRS=/home/max/ECE373-A2/HW2 modules
make[1]: Entering directory '/usr/src/linux-headers-4.13.0-38-generic'
  CC [M]  /home/max/ECE373-A2/HW2/hw2_kernel.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC	  /home/max/ECE373-A2/HW2/hw2_kernel.mod.o
  LD [M]  /home/max/ECE373-A2/HW2/hw2_kernel.ko
make[1]: Leaving directory '/usr/src/linux-headers-4.13.0-38-generic'

=============================================================
What to turn in: 3. Loading and running, before module param
=============================================================

max@MaxVirt:~/ECE373-A2/HW2$ sudo insmod hw2_kernel.ko
[sudo] password for max:
max@MaxVirt:~/ECE373-A2/HW2$ sudo mknod /dev/hw2_kernel c 243 0
max@MaxVirt:~/ECE373-A2/HW2$ cd User/
max@MaxVirt:~/ECE373-A2/HW2/User$ sudo ./user
Was read: 25
Enter a number: 11
Will write: 11
Was read after write: 11
max@MaxVirt:~/ECE373-A2/HW2/User$ cd ..
max@MaxVirt:~/ECE373-A2/HW2$ sudo rmmod hw2_kernel
max@MaxVirt:~/ECE373-A2/HW2$ sudo rm /dev/hw2_kernel

=============================================================
What to turn in: 3. Loading and running, after module param
Also shows use of "cat" command on sysfs.
=============================================================

max@MaxVirt:~/ECE373-A2/HW2$ sudo insmod hw2_kernel.ko test=42
max@MaxVirt:~/ECE373-A2/HW2$ sudo mknod /dev/hw2_kernel c 243 0
max@MaxVirt:~/ECE373-A2/HW2$ cd User/
max@MaxVirt:~/ECE373-A2/HW2/User$ sudo ./user
Was read: 42
Enter a number: 99
Will write: 99
Was read after write: 99
max@MaxVirt:~/ECE373-A2/HW2/User$ cat /sys/module/hw2_kernel/parameters/test
99

=============================================================
What to turn in: 4. Typescript of /proc/devices
(I outlined mine in "=" like these to make it easy to find)
=============================================================

max@MaxVirt:~/ECE373-A2/HW2/User$ cat /proc/devices
Character devices:
  1 mem
  4 /dev/vc/0
  4 tty
  4 ttyS
  5 /dev/tty
  5 /dev/console
  5 /dev/ptmx
  5 ttyprintk
  6 lp
  7 vcs
 10 misc
 13 input
 21 sg
 29 fb
 89 i2c
 99 ppdev
108 ppp
116 alsa
128 ptm
136 pts
180 usb
189 usb_device
204 ttyMAX
226 drm
=============================================================
243 HW2-Max
=============================================================
244 hidraw
245 aux
246 virtio-portsdev
247 bsg
248 watchdog
249 rtc
250 dax
251 dimmctl
252 ndctl
253 tpm
254 gpiochip

Block devices:
  2 fd
259 blkext
  7 loop
  8 sd
  9 md
 11 sr
 65 sd
 66 sd
 67 sd
 68 sd
 69 sd
 70 sd
 71 sd
128 sd
129 sd
130 sd
131 sd
132 sd
133 sd
134 sd
135 sd
252 virtblk
253 device-mapper
254 mdp
max@MaxVirt:~/ECE373-A2/HW2/User$ exit
exit

Script done on Mon 23 Apr 2018 12:49:46 PM PDT

============================================================
Included below is the output of dmesg for the two instances
I ran for the above typescript.
This shows the printk commands I used to notify myself I was
either in read or write, and what the value was being passed
as.
============================================================

[88314.829626] Allocated device successfuly at major: 243
[88340.674484] Opened instance.
[88340.674489] User was passed 25
[88344.903133] User wrote 11
[88344.903136] User was passed 11
[88344.903142] Closed instance.
[88358.851927] Unloaded.
[88376.333682] Allocated device successfuly at major: 243
[88400.621054] Opened instance.
[88400.621059] User was passed 42
[88407.124411] User wrote 99
[88407.124414] User was passed 99
[88407.124420] Closed instance.

