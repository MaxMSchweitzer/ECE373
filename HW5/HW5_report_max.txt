=============================================================
Max Schweitzer
ECE 373 - HW5 - PCI LED blink driver in userspace
PJ
5/21/2018
=============================================================

=============================================================
What to turn in: 1. User program source and Makefile
=============================================================

/*
  Max Schweitzer
  ECE 373
  HW5
  5/21/18
  
  This program is a basic user space driver for an e1000 pci device,
  allowing basic LED blinking.
  Example code used from pciraw.c provided by PJ.
*/

#include <stdio.h>
#include <pci/pci.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>

#define MEM_SIZE 0x0200000

/*Register offsets*/
#define LEDCTL 0x00E00
#define GOOD_PACKETS 0x00004074
/*LED control masks*/
#define LED0 0x0000000F
#define LED1 0x00000F00
#define LED2 0x000F0000
#define LED3 0x0F000000

#define LED_ON 0x0000000E
#define LED_OFF 0x0000000F
static struct pci_filter filter;

/*LED values to turn on in a loop, facilitates ease of use in the loop part*/
static uint32_t led[4] = {0x0000000F, 0x00000F00, 0x000F0000, 0x0F000000};

static int register_read(struct pci_dev *dev, uint32_t address, uint32_t *read_value)
{
  int pci_fd = open("/dev/mem", O_RDONLY | O_SYNC);
  if (pci_fd < 0)
  {
    perror("Open error!\n");
    return 1;
  }
  volatile void *mem;
  mem = mmap(NULL, MEM_SIZE, PROT_READ, MAP_SHARED, pci_fd, (dev->base_addr[0] & PCI_ADDR_MEM_MASK));
  
  if (mem == MAP_FAILED)
  {
    perror("mmap failure!\n");
    close(pci_fd);
    return 1;
  }
  
  *read_value = *((uint32_t *)(mem + address));

  munmap((void* )mem, MEM_SIZE);
  close(pci_fd);

  return 0;
}

static int register_write(struct pci_dev *dev, uint32_t address, uint32_t *write_value)
{

  int pci_fd = open("/dev/mem", O_RDWR | O_SYNC);
  if (pci_fd < 0)
  {
    perror("Open error!\n");
    return 1;
  }
  volatile void *mem;
  
  mem = mmap(NULL, MEM_SIZE, PROT_WRITE, MAP_SHARED, pci_fd, (dev->base_addr[0] & PCI_ADDR_MEM_MASK));
  if (mem == MAP_FAILED)
  {
    perror("mmap failure!\n");
    close(pci_fd);
    return 1;
  }
  *((uint32_t *)(mem + address)) = *write_value;

  munmap((void* )mem, MEM_SIZE);
  close(pci_fd);

  return 0;
}

int main (int argc, char **argv)
{
  uint32_t read_val, write_val;

  struct pci_access *pacc;
  struct pci_dev *dev;
  
  char buf[128];

  if (argc != 2)
  {
    printf("Specify device with <vendor>:<device> (8086:100e for this homework)\n");
    return 1;
  }

  pacc = pci_alloc();
  if (pacc == NULL)
  {
    perror("pci_alloc error!\n");
    return 1;
  }

  pci_filter_init(pacc, &filter);

  pci_init(pacc);
  pci_scan_bus(pacc);

  /*Search for the device number the user passed in.*/
  pci_filter_parse_id(&filter, argv[1]);

  for (dev = pacc->devices; dev; dev = dev->next)
  {
    if (pci_filter_match(&filter, dev))
      break;
  }

  pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_BASES | PCI_FILL_SIZES);

  /*Print format from pciraw.c provided by PJ*/
  printf( "%02x:%02x.%d (%04x:%04x)\n%s\n0x%08x\n",
        dev->bus, dev->dev, dev->func, 
        dev->vendor_id, dev->device_id,
        pci_lookup_name(pacc, buf, sizeof(buf),
        PCI_LOOKUP_VENDOR|PCI_LOOKUP_DEVICE, 
        dev->vendor_id, dev->device_id, 0, 0),
        (unsigned int)dev->base_addr[0]);

  uint32_t read = 0;
  uint32_t write = 0;

  /*Read the original value and store it.*/
  int result = register_read(dev, LEDCTL, &read);
  if (result)
    return 1;
  uint32_t LEDCTL_orig = read;
  printf("LEDCTL original value 0x%08x read from 0x%08x \n", read, (unsigned int)dev->base_addr[0] + LEDCTL); 

  /*Turn on LED0 and 2.*/
  write = (read & ~(LED0 | LED2)) | 0x000E000E; 
  printf("Will write 0x%08x to 0x%08x \n", write,(unsigned int)dev->base_addr[0] + LEDCTL);
  result = register_write(dev, LEDCTL, &write);
  sleep(2);
  
  result = register_read(dev, LEDCTL, &read); 
  printf("0x%08x read from 0x%08x \n", read, (unsigned int)dev->base_addr[0] + LEDCTL); 
  
  /*Turn them all off*/
  write = (read & ~(LED0 | LED1 | LED2 | LED3)) | 0x00000000;
  printf("Will write 0x%08x to 0x%08x \n", write, (unsigned int) dev->base_addr[0] + LEDCTL);
  result = register_write(dev, LEDCTL, &write);
  sleep(2);

  /*This portion of the assignment seemed a bit ambiguous,
    so I interpreted it as do a loop and turn each LED on
    in succession.*/
  for (int j = 0; j < 5; j++)
  {
    for (int i = 0; i < 4; i++)
    {
      result = register_read(dev, LEDCTL, &read); 
      write = (read & ~(led[i])) | (LED_ON << (i*8));
      result = register_write(dev, LEDCTL, &write);
      sleep(1);
      
      write = (read & ~(led[i])) | (LED_OFF << (i*8));
      result = register_write(dev, LEDCTL, &write);
    }
  }


  /*Restore the original contents.*/
  printf("Will write 0x%08x to 0x%08x \n", LEDCTL_orig, (unsigned int)dev->base_addr[0] + LEDCTL);
  result = register_write(dev, LEDCTL, &LEDCTL_orig);


  /*I didn't want to rerun the program, so here's a loop for reading from the good packets register*/
  for (int i = 0; i < 3; i++)
  {
    result = register_read(dev, GOOD_PACKETS, &read);
    printf("0x%08x read from 0x%08x \n", read, (unsigned int)(dev->base_addr[0] + GOOD_PACKETS));
    sleep(1);
  }

  return 0;
}

=============================================================
Makefile
=============================================================

# Super simple makefile.
all: 
	gcc -g -o user hw5_main.c -lpci -lz

clean:
	rm user

=============================================================
What to turn in: 2. Short explanation
=============================================================

That the user space program / driver does not replace the
kernel driver or interfere with it.

=============================================================
What to turn in: 3. Typescript
=============================================================

Script started on Mon 21 May 2018 02:21:45 PM PDT
root@MaxVirt:/home/max/ECE373-A2/HW5# ./user 8086:100e
00:09.0 (8086:100e)
Intel Corporation 82540EM Gigabit Ethernet Controller
0xfc0a0000
LEDCTL original value 0x00000602 read from 0xfc0a0e00 
Will write 0x000e060e to 0xfc0a0e00 
0x000e060e read from 0xfc0a0e00 
Will write 0x00000000 to 0xfc0a0e00 
Will write 0x00000602 to 0xfc0a0e00 
0x00000000 read from 0xfc0a4074 
0x00000002 read from 0xfc0a4074 
0x00000000 read from 0xfc0a4074 
root@MaxVirt:/home/max/ECE373-A2/HW5# exit
exit

Script done on Mon 21 May 2018 02:22:25 PM PDT

=============================================================
What to turn in: 4. Note from someone (probably Brett) 
=============================================================

Sign here: 
-------------------------------------------------------------


