#include <stdio.h>
#include <pci/pci.h>
#include <stdlib.h>
#include <fcntl.h>

static struct pci_filter filter;

int main (int argc, char **argv)
{
  int pci_fd;
  uint32_t read_val, write_val;

  struct pci_access *pacc;
  struct pci_dev *dev;

  char buf[128];

  pacc = pci_alloc();

  //pci_filter_init(pacc, &filter);

  pci_init(pacc);
  pci_scan_bus(pacc);

// line 150ish in pci_raw, care about 8086:100e only, hard code it in.
// Parse this from command line better
  pci_filter_parse_id(&filter, argv[1]);

  for (dev = pacc->devices; dev; dev = dev->next)
  {
    if (pci_filter_match(&filter, dev))
      break;
  }


  pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_BASES | PCI_FILL_SIZES);
  printf( "%02x:%02x.%d (%04x:%04x)\n%s\n",
        dev->bus, dev->dev, dev->func, 
      dev->vendor_id, dev->device_id,
       pci_lookup_name(pacc, buf, sizeof(buf),
        PCI_LOOKUP_VENDOR|PCI_LOOKUP_DEVICE, 
         dev->vendor_id, dev->device_id, 0, 0));



  pci_fd = open("/dev/mem", O_RDWR | O_SYNC);
  //volatile void *mem;
  //mem = mmap(
  return 1;
}
